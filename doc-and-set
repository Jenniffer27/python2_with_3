{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# the same and diff between dic and set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'tanglei', 'country': 'China', 'age': '18', 'job': 'it'}\n",
      "{'name': 'tanglei', 'country': 'China', 'age': '18', 'job': 'it'}\n",
      "{'name': 'tanglei', 'country': 'China', 'age': '18', 'job': 'it'}\n",
      "{'name': 'tanglei', 'country': 'China', 'age': '18', 'job': 'it'}\n",
      "<class 'dict'>\n"
     ]
    }
   ],
   "source": [
    "#generation\n",
    "dic1 = {\"name\":\"tanglei\", \"country\":\"China\",\"age\":\"18\", \"job\":\"it\"}\n",
    "dic2 = dict({\"name\":\"tanglei\", \"country\":\"China\",\"age\":\"18\", \"job\":\"it\"})\n",
    "dic3 = dict([(\"name\",\"tanglei\"), (\"country\",\"China\"),(\"age\",\"18\"), (\"job\",\"it\")])\n",
    "dic4 = dict(name=\"tanglei\",country=\"China\",age=\"18\",job=\"it\")\n",
    "print(dic1)\n",
    "print(dic2)\n",
    "print(dic3)\n",
    "print(dic4)\n",
    "\n",
    "s1 = {1,2,3,4,5}\n",
    "s2 = set([1,2,3,4,5])\n",
    "s3 = set((1,2,3,4,5))\n",
    "\n",
    "guess={}\n",
    "print(type(guess))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18\n",
      "it\n",
      "null\n",
      "set can not get index: 'set' object is not subscriptable\n"
     ]
    }
   ],
   "source": [
    "#index\n",
    "dic1 = {\"name\":\"tanglei\", \"country\":\"China\",\"age\":\"18\", \"job\":\"it\"}\n",
    "s1 = {1,2,3,4,5}\n",
    "print(dic1[\"age\"])\n",
    "print(dic1.get(\"job\"))\n",
    "print(dic1.get(\"ttt\", 'null'))\n",
    "\n",
    "try:\n",
    "    s1[2]\n",
    "except TypeError as err:\n",
    "    print(\"set can not get index: {}\".format(err))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dic is {'name': 'tanglei', 'country': 'China', 'age': '18', 'job': 'it', 'gender': 'female'}, set is {1, 2, 3, 4, 5, 6}\n",
      "dic is {'country': 'China', 'age': '18', 'job': 'it', 'gender': 'female'}, set is {2, 3, 4, 5, 6}\n",
      "dic is {'country': 'China', 'age': '18', 'job': 'it', 'gender': 'female'}, set is {2, 3, 5, 6}\n",
      "dic is {'country': 'China', 'age': '18', 'job': 'it2', 'gender': 'female'}, set is {2, 3, 5, 6}\n"
     ]
    }
   ],
   "source": [
    "#add,del,update\n",
    "dic1 = {\"name\":\"tanglei\", \"country\":\"China\",\"age\":\"18\", \"job\":\"it\"}\n",
    "s1 = {1,2,3,4,5}\n",
    "dic1[\"gender\"]=\"female\"\n",
    "s1.add(6)\n",
    "print(\"dic is {}, set is {}\".format(dic1,s1))\n",
    "dic1.pop(\"name\")\n",
    "s1.pop()    #random , be careful\n",
    "print(\"dic is {}, set is {}\".format(dic1,s1))\n",
    "s1.remove(4)\n",
    "print(\"dic is {}, set is {}\".format(dic1,s1))\n",
    "dic1[\"job\"]=\"it2\"\n",
    "print(\"dic is {}, set is {}\".format(dic1,s1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_items([('name', 'tanglei'), ('country', 'China'), ('age', '18'), ('job', 'it')])\n",
      "[('age', '18'), ('country', 'China'), ('job', 'it'), ('name', 'tanglei')]\n",
      "[('age', '18'), ('country', 'China'), ('job', 'it'), ('name', 'tanglei')]\n",
      "[1, 2, 3, 4, 5, 8]\n"
     ]
    }
   ],
   "source": [
    "#sort\n",
    "dic1 = {\"name\":\"tanglei\", \"country\":\"China\",\"age\":\"18\", \"job\":\"it\"}\n",
    "s1 = {8,1,2,3,4,5}\n",
    "print(dic1.items())\n",
    "dic2 = sorted(dic1.items(), key=lambda x: x[0])\n",
    "dic3 = sorted(dic1.items(),key=lambda x:x[1])\n",
    "print(dic2)\n",
    "print(dic3)\n",
    "s2=sorted(s1)\n",
    "print(s2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# the performance between list and set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the time cost by list is 0.6865308249834925\n",
      "the time cost by set is 0.0010523860109969974\n"
     ]
    }
   ],
   "source": [
    "def findpricebylist(products):\n",
    "    priceslist = []\n",
    "    for _, price in products:\n",
    "        if price not in priceslist:\n",
    "            priceslist.append(price)\n",
    "            \n",
    "def findpricebyset(products):\n",
    "    priceset = set()\n",
    "    for _, price in products:\n",
    "            priceset.add(price)\n",
    "            \n",
    "p=[i for i in range(1,10001)]\n",
    "v=[j for j in range(10001,20001)]\n",
    "products = list(zip(p,v))\n",
    "# print(products)\n",
    "\n",
    "import time\n",
    "starttime = time.perf_counter()\n",
    "findpricebylist(products)\n",
    "endtime = time.perf_counter()\n",
    "print(\"the time cost by list is {}\".format(endtime-starttime))\n",
    "starttime = time.perf_counter()\n",
    "findpricebyset(products)\n",
    "endtime = time.perf_counter()\n",
    "print(\"the time cost by set is {}\".format(endtime-starttime))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
